openapi: '3.1.0'

info:
  title: 'Zone42 API'
  description: 'Zone42 administrator api'
  version: '1.0'

servers:
  - url: https://api.zone42.io/1.0/

security:
  - app_id: []

paths:
  /zones:
    get:
      summary: 'list of all zones'
      parameters:
        - name: start
          in: query
          description: 'start index'
          required: false
          schema:
            type: integer
        - name: count
          in: query
          description: 'number of items in response'
          required: false
          schema:
            type: integer
        - name: q
          in: query
          description: 'search query'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones'
        400:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new zone'
      requestBody:
        required: true
        description: 'new zone data'
        $ref: '#/components/requestBodies/zone'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'get zone data'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    put:
      summary: 'updated zone data'
      requestBody:
        required: true
        description: 'updated zone data'
        $ref: '#/components/requestBodies/zone'
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    delete:
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'list of all locations within zone'
      parameters:
        - name: start
          in: query
          description: 'start index'
          required: false
          schema:
            type: integer
        - name: count
          in: query
          description: 'number of items in response'
          required: false
          schema:
            type: integer
        - name: q
          in: query
          description: 'search query'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new location in zone'
      requestBody:
        required: true
        description: 'new location data'
        $ref: '#/components/requestBodies/location'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'get location of a zone'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'
    put:
      summary: 'update a location in zone'
      requestBody:
        required: true
        description: 'updated location data'
        $ref: '#/components/requestBodies/location'
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'
    delete:
      summary: 'remove a location from zone'
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}/rrsets:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'list of all rrsets within location'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrsets'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'
    post:
      summary: 'create a new rrset in location'
      requestBody:
        description: 'new rrset data'
        required: true
        $ref: '#/components/requestBodies/rrset'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}/rrsets/{rtype}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string
      - name: rtype
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/rtype'
    get:
      summary: 'get rrset of a zone'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'
    put:
      summary: 'update a rrset in location'
      requestBody:
        description: 'updated rrset data'
        required: true
        $ref: '#/components/requestBodies/rrset'
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'
    delete:
      summary: 'remove a rrset from location'
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /auth/signup:
    post:
      summary: 'create a new user'
      requestBody:
        required: true
        description: 'new user data'
        $ref: '#/components/requestBodies/user'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /auth/verify:
    post:
      summary: 'verify a request'
      parameters:
        - name: code
          in: query
          description: 'verification code'
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'

  /auth/login:
    post:
      summary: 'create a new user'
      requestBody:
        required: true
        description: 'new user data'
        $ref: '#/components/requestBodies/user'
      responses:
        200:
          description: 'successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        401:
          $ref: '#/components/responses/error_response'

  /auth/logout:
    post:
      summary: 'logout user'
      responses:
        200:
          $ref: '#/components/responses/success_response'

  /auth/refresh_token:
    get:
      summary: 'refresh auth token'
      responses:
        200:
          description: 'successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        401:
          $ref: '#/components/responses/error_response'

components:
  securitySchemes:
    app_id:
      type: apiKey
      description: api key to authorize requests
      name: appid
      in: query

  requestBodies:
    zone:
      description: 'zone'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/zone'

    location:
      description: 'location'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/location'

    rrset:
      description: 'rrset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rrset'

  responses:
    error_response:
      description: 'error response'
      content:
        application/json:
          schema:
            title: error response
            type: object
            properties:
              code:
                type: integer
              message:
                type: string

    success_response:
      description: 'successful response'
      content:
        application/json:
          schema:
            title: successful response
            type: object
            properties:
              code:
                type: integer
              message:
                type: string

  schemas:
    user:
      title: user
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example: '{"email":"user1@example.com", "password": "pwd123"}'

    auth:
      title: auth response
      type: object
      properties:
        code:
          type: integer
        token:
          type: string
        expire:
          type: string
      example: '{"code": 200, "token":"abcdefg123", "expire":"2006-01-02T15:04:05Z07:00"}'

    zones:
      title: zones
      type: array
      minItems: 0
      uniqueItems: true
      items:
        type: string
      example: '["example.com.", "my.zon."]'

    zone:
      title: zone
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        enabled:
          type: boolean
        dnssec:
          type: boolean
        cname_flattening:
          type: boolean
      example: '{"name": "example.com.", "enabled": true, "dnssec":true, "cname_flattening": false}'

    locations:
      title: locations
      type: array
      minItems: 1
      uniqueItems: true
      items:
        type: string
      example: '["@", "www", "sub.x"]'

    location:
      title: location
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
      example: '{"name": "www", "enabled": true}'

    rrsets:
      title: rrsets
      type: array
      minItems: 0
      uniqueItems: true
      items:
        $ref: '#/components/schemas/rtype'
      example: '["a", "aaaa", "ns", "txt"]'

    rrset:
      title: rrset
      type: object
      properties:
        type:
          $ref: '#/components/schemas/rtype'
        value:
          anyOf:
            - $ref: '#/components/schemas/a'
            - $ref: '#/components/schemas/aaaa'
            - $ref: '#/components/schemas/cname'
            - $ref: '#/components/schemas/txt'
            - $ref: '#/components/schemas/ns'
            - $ref: '#/components/schemas/mx'
            - $ref: '#/components/schemas/srv'
            - $ref: '#/components/schemas/caa'
            - $ref: '#/components/schemas/ptr'
            - $ref: '#/components/schemas/tlsa'
            - $ref: '#/components/schemas/ds'
            - $ref: '#/components/schemas/aname'
        enabled:
          type: boolean

    rtype:
      type: string
      enum: [a, aaaa, cname, txt, ns, mx srv, caa, ptr, tlsa, ds, aname]

    a:
      title: a
      allOf:
        - $ref: '#/components/schemas/ip'

    aaaa:
      title: aaaa
      allOf:
        - $ref: '#/components/schemas/ip'

    ip:
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        filter:
          type: object
          title: filter
          properties:
            count:
              type: string
              enum: [multi, single]
              default: multi
            order:
              type: string
              enum: [weighted, rr, none]
              default: none
            geo_filter:
              type: string
              enum: [country, location, asn, asn+country, none]
              default: none
        health_check:
          type: object
          title: health_check
          properties:
            protocol:
              type: string
              enum: [http, https, ping]
              default: http
            uri:
              type: string
              default: /
            port:
              type: integer
              default: 80
            timeout:
              type: integer
              default: 1000
            up_count:
              type: integer
              default: 3
            down_count:
              type: integer
              default: -3
            enable:
              type: boolean
              default: false
        records:
          title: records
          type: array
          items:
            type: object
            required:
              - ip
            properties:
              weight:
                type: integer
                default: 0
              ip:
                type: string
              country:
                type: array
                items:
                  type: string
                  default: ''
              asn:
                type: array
                items:
                  type: integer
                  default: 0

    cname:
      title: cname
      type: object
      required:
        - host
      properties:
        ttl:
          type: integer
          default: 300
        host:
          type: string

    txt:
      title: txt
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          uniqueItems: false
          items:
            type: string

    ns:
      title: ns
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          uniqueItems: true
          items:
            type: string

    mx:
      title: mx
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - host
              - preference
            properties:
              host:
                type: string
              preference:
                type: string

    srv:
      title: srv
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - target
              - priority
              - weight
              - port
            properties:
              target:
                type: string
              priority:
                type: integer
              weight:
                type: integer
              port:
                type: integer

    caa:
      title: caa
      type: object
      required:
        - tag
        - value
        - flag
      properties:
        ttl:
          type: integer
          default: 300
        tag:
          type: string
        value:
          type: string
        flag:
          type: integer

    ptr:
      title: ptr
      type: object
      required:
        - domain
      properties:
        ttl:
          type: integer
          default: 300
        domain:
          type: string

    tlsa:
      title: tlsa
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - usage
              - selector
              - matching_type
              - certificate
            properties:
              usage:
                type: integer
              selector:
                type: integer
              matching_type:
                type: integer
              certificate:
                type: string

    ds:
      title: ds
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - key_tag
              - algorithm
              - digest_type
              - digest
            properties:
              key_tag:
                type: integer
              algorithm:
                type: integer
              digest_type:
                type: integer
              digest:
                type: string

    aname:
      title: aname
      type: object
      required:
        - location
      properties:
        ttl:
          type: integer
          default: 300
        location:
          type: string